generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_MICRO_AI_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_MICRO_AI_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSignupRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  details   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id             String        @id @default(uuid())
  name           String?
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  tokens         Int           @default(10)
  domains        domains[]
  subscription   Subscription?
  subscriptionId Int?
  createdAt      DateTime      @default(now())
  activeKey      String?
  userKeys       UserKey[]
  widget         Widget? // Single widget
  apiKeys        ApiKey[]
}

model UserKey {
  id        Int      @id @default(autoincrement())
  userId    String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  valid     Boolean  @default(true)
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  userId      String
  key         String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  enabled     Boolean  @default(false)
  valid       Boolean  @default(false)
}

model Widget {
  id             String          @id @default(uuid())
  userId         String          @unique
  subscriptionId Int
  config         Json
  domainPrompt   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscription   Subscription    @relation(fields: [subscriptionId], references: [id])
  widgetOptions  WidgetOptions[]
}

model WidgetActions {
  id            Int             @id @default(autoincrement()) // Changed to Int
  name          String
  description   String?
  prompt        String?
  isEnabled     Boolean         @default(true)
  isApproved    Boolean?
  widgetOptions WidgetOptions[]
  planOptions   PlanOptions[]
}

model WidgetOptions {
  widget   Widget        @relation(fields: [widgetId], references: [id])
  widgetId String
  option   WidgetActions @relation(fields: [optionId], references: [id])
  optionId Int // Changed to Int
  isCustom Boolean       @default(false)

  @@id([widgetId, optionId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model domains {
  id        Int      @id @default(autoincrement())
  hostname  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  usage     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  validated Boolean  @default(false)
}

model Subscription {
  id          Int      @id @default(autoincrement())
  plan        Plan     @relation(fields: [planId], references: [id])
  planId      Int
  credits     Int      @default(0)
  usedCredits Int      @default(0)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  widget      Widget[]
}

model Plan {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  price           Float
  domainsAllowed  Int // Use 'null' to represent 'unlimited'
  creditsPerMonth Int // Use 'null' to represent 'unlimited', BigInt for large numbers
  subscriptions   Subscription[]
  planOptions     PlanOptions[]
}

model PlanOptions {
  id       Int           @id @default(autoincrement())
  planId   Int
  optionId Int // Changed to Int
  plan     Plan          @relation(fields: [planId], references: [id])
  option   WidgetActions @relation(fields: [optionId], references: [id])

  @@unique([planId, optionId])
}
